-- Timelock Tests
Test "Reverts if calling setDelay directly"
    Timelock Deploy Geoff 604800
    AllowFailures
    Timelock SetDelay 604
    Assert Revert "revert Timelock::setDelay: Call must come from Timelock."

Test "Reverts if calling setPendingAdmin directly"
    Timelock Deploy Geoff 604800
    AllowFailures
    Timelock SetPendingAdmin Jared
    Assert Revert "revert Timelock::setPendingAdmin: Call must come from Timelock."

Test "Reverts if calling acceptAdmin while not being pendingAdmin"
    Timelock Deploy Geoff 604800
    AllowFailures
    From Jared (Timelock AcceptAdmin)
    Assert Revert "revert Timelock::acceptAdmin: Call must come from pendingAdmin."

Test "Queuing and execute a transaction for setDelay"
    FreezeTime 90
    -- Admin:Geoff Delay:1 week
    Timelock Deploy Geoff 604800
    Assert Equal (Timelock Delay) 604800
    -- eta = 1 week (604800) + blockTimestamp (100) = 604900
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setDelay(uint256)" "1209600"))
    From Geoff (Timelock QueueTransaction (Timelock Address) 0 604900 "setDelay(uint256)" "1209600")
    Assert True (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setDelay(uint256)" "1209600"))
    --  Now execute after delay time
    FreezeTime 604900
    From Geoff (Timelock ExecuteTransaction (Timelock Address) 0 604900 "setDelay(uint256)" "1209600")
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setDelay(uint256)" "1209600"))
    Assert Equal (Timelock Delay) 1209600

Test "Queuing and execute a transaction for setPendingAdmin"
    FreezeTime 90
    -- Admin:Geoff Delay:1 week
    Timelock Deploy Geoff 604800
    Assert Equal (Timelock Admin) (User Geoff Address)
    Assert Equal (Timelock PendingAdmin) (Address Zero)
    -- eta = 1 week (604800) + blockTimestamp (100) = 604900
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address)))
    From Geoff (Timelock QueueTransaction (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address))
    Assert True (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address)))
    --  Now execute after delay time
    FreezeTime 604900
    From Geoff (Timelock ExecuteTransaction (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address))
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Timelock Address) 0 604900 "setPendingAdmin(address)" (User Jared Address)))
    Assert Equal (Timelock PendingAdmin) (User Jared Address)
    From Jared (Timelock AcceptAdmin)
    Assert Equal (Timelock Admin) (User Jared Address)
    Assert Equal (Timelock PendingAdmin) (Address Zero)

Test "Accept rToken admin from Timelock"
    FreezeTime 90
    -- Admin:Geoff Delay:1 week
    Timelock Deploy Geoff 604800
    Assert Equal (Timelock Admin) (User Geoff Address)
    NewCointroller
    NewRToken ZRX rZRX
    Assert Equal (RToken rZRX Admin) (Address Root)
    Assert Equal (RToken rZRX PendingAdmin) (Address Zero)
    From Root (RToken rZRX SetPendingAdmin (Timelock Address))
    Assert Equal (RToken rZRX PendingAdmin) (Timelock Address)
    -- eta = 1 week (604800) + blockTimestamp (~100) = 604900
    Assert False (Timelock QueuedTransaction (Timelock TxHash (RToken rZRX Address) 0 604900 "_acceptAdmin()" ""))
    From Geoff (Timelock QueueTransaction (RToken rZRX Address) 0 604900 "_acceptAdmin()" "")
    Assert True (Timelock QueuedTransaction (Timelock TxHash (RToken rZRX Address) 0 604900 "_acceptAdmin()" ""))
    --  Now execute after delay time
    FreezeTime 604900
    From Geoff (Timelock ExecuteTransaction (RToken rZRX Address) 0 604900 "_acceptAdmin()" "")
    Assert False (Timelock QueuedTransaction (Timelock TxHash (RToken rZRX Address) 0 604900 "_acceptAdmin()" ""))
    Assert Equal (RToken rZRX Admin) (Timelock Address)
    Assert Equal (RToken rZRX PendingAdmin) (Address Zero)

Test "Accept unitroller admin from Timelock"
    -- Admin:Geoff Delay:1 week
    Timelock Deploy Geoff 604800
    Assert Equal (Timelock Admin) (User Geoff Address)
    NewCointroller
    Assert Equal (Unitroller Admin) (Address Root)
    Assert Equal (Unitroller PendingAdmin) (Address Zero)
    From Root (Unitroller SetPendingAdmin (Timelock Address))
    Assert Equal (Unitroller PendingAdmin) (Timelock Address)
    -- eta = 1 week (604800) + blockTimestamp (100) = 604900
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Unitroller Address) 0 604900 "_acceptAdmin()" ""))
    FreezeTime 90
    From Geoff (Timelock QueueTransaction (Unitroller Address) 0 604900 "_acceptAdmin()" "")
    Assert True (Timelock QueuedTransaction (Timelock TxHash (Unitroller Address) 0 604900 "_acceptAdmin()" ""))
    --  Now execute after delay time
    FreezeTime 604900
    From Geoff (Timelock ExecuteTransaction (Unitroller Address) 0 604900 "_acceptAdmin()" "")
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Unitroller Address) 0 604900 "_acceptAdmin()" ""))
    Assert Equal (Unitroller Admin) (Timelock Address)
    Assert Equal (Unitroller PendingAdmin) (Address Zero)


Test "Reduce reserves for RBep20 from Timelock and send reserves to external address"
    NewCointroller
    ListedRToken ZRX rZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX rZRX
    Mint Geoff 50e18 rZRX
    Assert Equal (Bep20 rZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (RToken rZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (RToken rZRX ExchangeRate) (Exactly 1e9)
    BorrowAndRepayWithInterest ZRX rZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Timelock Deploy Jared 604800
    Assert Equal (Bep20 ZRX TokenBalance rZRX) (Exactly 55e18)
    Assert Equal (Bep20 ZRX TokenBalance (Timelock Address)) (Exactly 0e18)
    Assert Equal (Bep20 rZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (RToken rZRX Reserves) (Exactly 1e18)
    Assert Equal (RToken rZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (RToken rZRX ExchangeRate) (Exactly 1.08e9)
    -- Set Timelock as admin
    From Root (RToken rZRX SetPendingAdmin (Timelock Address))
    -- Queue Transactions
    FreezeTime 90
    From Jared (Timelock QueueTransaction (RToken rZRX Address) 0 604900 "_acceptAdmin()" "")
    From Jared (Timelock QueueTransaction (RToken rZRX Address) 0 604900 "_reduceReserves(uint256)" "1000000000000000000")
    From Jared (Timelock QueueTransaction (Bep20 ZRX Address) 0 604900 "transfer(address,uint256)" "0x0000000000000000000000000000000000000001" "1000000000000000000")
    FreezeTime 604900
    From Jared (Timelock ExecuteTransaction (RToken rZRX Address) 0 604900 "_acceptAdmin()" "")
    -- Now, let's pull out all of our reserves (1e18)
    From Jared (Timelock ExecuteTransaction (RToken rZRX Address) 0 604900 "_reduceReserves(uint256)" "1000000000000000000")
    Assert Equal (Bep20 ZRX TokenBalance rZRX) (Exactly 54e18)
    Assert Equal (Bep20 ZRX TokenBalance (Timelock Address)) (Exactly 1e18)
    Assert Equal (Bep20 rZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (RToken rZRX Reserves) (Exactly 0e18)
    Assert Equal (RToken rZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.0e18+0.0e18-0.0e18)/500.0e8
    Assert Equal (RToken rZRX ExchangeRate) (Exactly 1.08e9)
    Assert Equal (Bep20 ZRX TokenBalance "0x0000000000000000000000000000000000000001") (Exactly 0e18)
    From Jared (Timelock ExecuteTransaction (Bep20 ZRX Address) 0 604900 "transfer(address,uint256)" "0x0000000000000000000000000000000000000001" "1000000000000000000")
    Assert Equal (Bep20 ZRX TokenBalance (Timelock Address)) (Exactly 0e18)
    Assert Equal (Bep20 ZRX TokenBalance "0x0000000000000000000000000000000000000001") (Exactly 1e18)

Test "Reduce reserves for RBinance from Timelock and send reserves to external address"
    NewCointroller
    ListedEtherToken rETH initialExchangeRate:1e9
    CallMintEth Geoff 50e18 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (RToken rETH UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (RToken rETH ExchangeRate) (Exactly 1e9)
    BorrowAndRepayEthWithInterest rETH 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    FreezeTime 90
    Timelock Deploy Jared 604800
    Assert Equal (EtherBalance rETH) (Exactly 55e18)
    Assert Equal (EtherBalance (Timelock Address)) (Exactly 0e18)
    Assert Equal (Bep20 rETH TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (RToken rETH Reserves) (Exactly 1e18)
    Assert Equal (RToken rETH UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (RToken rETH ExchangeRate) (Exactly 1.08e9)
    -- Set Timelock as admin
    From Root (RToken rETH SetPendingAdmin (Timelock Address))
    -- Queue Transactions
    From Jared (Timelock QueueTransaction (RToken rETH Address) 0 604900 "_acceptAdmin()" "")
    From Jared (Timelock QueueTransaction (RToken rETH Address) 0 604900 "_reduceReserves(uint256)" "1000000000000000000")
    From Jared (Timelock QueueTransaction Jared 1000000000000000000 604900 "" "")
    FreezeTime 604900
    From Jared (Timelock ExecuteTransaction (RToken rETH Address) 0 604900 "_acceptAdmin()" "")
    -- Now, let's pull out all of our reserves (1e18)
    From Jared (Timelock ExecuteTransaction (RToken rETH Address) 0 604900 "_reduceReserves(uint256)" "1000000000000000000")
    Assert Equal (EtherBalance (Timelock Address)) 1e18
    Assert Equal (EtherBalance rETH) (Exactly 54e18)
    Assert Equal (Bep20 rETH TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (RToken rETH Reserves) (Exactly 0e18)
    Assert Equal (RToken rETH UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.0e18+0.0e18-0.0e18)/500.0e8
    Assert Equal (RToken rETH ExchangeRate) (Exactly 1.08e9)
    Expect Changes (EtherBalance Jared) 1e18
    Trx GasPrice 0 (From Jared (Timelock ExecuteTransaction Jared 1000000000000000000 604900 "" ""))
    Assert Equal (EtherBalance (Timelock Address)) (Exactly 0e18)

Test "Set Pending Cointroller implementation on Unitroller from Timelock"
    Unitroller Deploy
    PriceOracle Deploy Simple
    CointrollerImpl Deploy ScenarioG1 ScenCointrollerG1
    Unitroller SetPendingImpl ScenCointrollerG1
    Assert Equal (Unitroller PendingImplementation) (CointrollerImpl ScenCointrollerG1 Address)
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing rBinance use ListedEtherToken to replace proxy
    CointrollerImpl ScenCointrollerG1 BecomeG1 (PriceOracleProxy Address) 0.1 20
    Assert Equal (Unitroller PendingImplementation) (Address Zero)
    Assert Equal (Unitroller Implementation) (Address ScenCointrollerG1)
    FreezeTime 90
    Timelock Deploy Coburn 604800
    CointrollerImpl Deploy Scenario ScenCointroller
    Unitroller SetPendingImpl ScenCointroller
    Unitroller SetPendingAdmin (Timelock Address)
    Assert Equal (Unitroller PendingAdmin) (Timelock Address)
    Assert Equal (Unitroller PendingImplementation) (CointrollerImpl ScenCointroller Address)
    From Coburn (Timelock QueueTransaction (Unitroller Address) 0 604900 "_acceptAdmin()" "")
    From Coburn (Timelock QueueTransaction (CointrollerImpl ScenCointroller Address) 0 604900 "_become(address)" (Unitroller Address))
    FreezeTime 604900
    From Coburn (Timelock ExecuteTransaction (Unitroller Address) 0 604900 "_acceptAdmin()" "")
    Assert Equal (Unitroller Admin) (Timelock Address)
    Assert Equal (Unitroller PendingAdmin) (Address Zero)
    From Coburn (Timelock ExecuteTransaction (CointrollerImpl ScenCointroller Address) 0 604900 "_become(address)" (Unitroller Address))
    Assert Equal (Unitroller Implementation) (Address ScenCointroller)
    Assert Equal (Unitroller PendingImplementation) (Address Zero)
