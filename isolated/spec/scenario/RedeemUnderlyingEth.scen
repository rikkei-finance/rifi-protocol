-- Redeem Tests

Test "Mint then Redeem All"
    NewCointroller
    ListedEtherToken rETH initialExchangeRate:0.005e9
    CallMintEth Geoff 0.005e18 rETH
    -- Check current affairs
    Assert Equal (Bep20 rETH TokenBalance Geoff) 10e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 0.005e18
    Invariant Static (RToken rETH ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (EtherBalance Geoff) +0.005e18
    RedeemUnderlyingEth Geoff 0.005e18 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) Zero
    Assert Equal (RToken rETH UnderlyingBalance Geoff) Zero

Test "Mint then Redeem Part"
    NewCointroller
    ListedEtherToken rETH initialExchangeRate:0.005e9
    CallMintEth Geoff 0.005e18 rETH
    -- Check current affairs
    Assert Equal (Bep20 rETH TokenBalance Geoff) 10e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 0.005e18
    Invariant Static (RToken rETH ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (EtherBalance Geoff) +0.001e18
    RedeemUnderlyingEth Geoff 0.001e18 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) 8e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 0.004e18

Test "Mint then Redeem Too Much"
    NewCointroller
    ListedEtherToken rETH initialExchangeRate:0.005e9
    CallMintEth Geoff 0.005e18 rETH
    AllowFailures
    -- Check and hold static
    Invariant Static (RToken rETH ExchangeRateStored)
    Invariant Remains (Bep20 rETH TokenBalance Geoff) 10e8
    Invariant Static (EtherBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlyingEth Geoff 0.0055e18 rETH
    -- TODO: This should really be REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, but based on
    -- the order of subtractions, total supply comes before account supply.
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3" -- TODO: This error is wrong

Test "Mint then Redeem Zero"
    NewCointroller
    ListedEtherToken rETH initialExchangeRate:0.005e9
    CallMintEth Geoff 0.005e18 rETH
    -- Check and hold static
    Invariant Static (RToken rETH ExchangeRateStored)
    Invariant Remains (Bep20 rETH TokenBalance Geoff) 10e8
    Invariant Static (EtherBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlyingEth Geoff 0e18 rETH

Test "Mint then redeem with interest - no reserves"
    Invariant Success
    NewCointroller
    ListedEtherToken rETH initialExchangeRate:1e9
    Invariant Remains (RToken rETH Reserves) Zero
    CallMintEth Geoff 50e18 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) 500e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 50e18
    Assert Equal (RToken rETH ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayEthWithInterest rETH 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 rETH TokenBalance Geoff) 500e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 55e18
    Assert Equal (RToken rETH ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Expect Changes (EtherBalance Geoff) 55e18
    RedeemUnderlyingEth Geoff 55e18 rETH
    Assert Equal (EtherBalance rETH) 0e18
    Assert Equal (Bep20 rETH TokenBalance Geoff) 0e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 0e18
    Assert Equal (RToken rETH ExchangeRate) 1e9

Pending "Mint then redeem part with interest - no reserves"
    Invariant Success
    NewCointroller
    ListedRToken ZRX rETH initialExchangeRate:1e9
    Invariant Remains (RToken rETH Reserves) Zero
    Prep Geoff 50e18 ZRX rETH
    Mint Geoff 50e18 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) 500e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 50e18
    Assert Equal (RToken rETH ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX rETH 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 rETH TokenBalance Geoff) 500e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 55e18
    Assert Equal (RToken rETH ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 499e8 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) 1e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 0.11e18
    Assert Equal (RToken rETH ExchangeRate) 1.1e9

Pending "Mint then redeem with reserves and interest"
    Invariant Success
    NewCointroller
    ListedRToken ZRX rETH initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX rETH
    Mint Geoff 50e18 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) 500e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 50e18
    Assert Equal (RToken rETH ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX rETH 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 rETH TokenBalance Geoff) 500e8
    Assert Equal (RToken rETH Reserves) 1e18
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 54e18
    -- 55e18 + 0e18 - 1e18 / 500
    Assert Equal (RToken rETH ExchangeRate) 1.08e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 rETH
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 54e18
    Assert Equal (Bep20 ZRX TokenBalance rETH) 1e18
    Assert Equal (Bep20 rETH TokenBalance Geoff) 0e8
    Assert Equal (RToken rETH Reserves) 1e18
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 0e18
    Assert Equal (RToken rETH ExchangeRate) 1e9

Test "Two users Mint, one redeems"
    NewCointroller
    ListedEtherToken rETH initialExchangeRate:0.005e9
    CallMintEth Geoff 0.002e18 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) 4e8
    Assert Equal (Bep20 rETH TotalSupply) 4e8
    CallMintEth Torrey 0.004e18 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) 4e8
    Assert Equal (Bep20 rETH TokenBalance Torrey) 8e8
    Assert Equal (Bep20 rETH TotalSupply) 12e8
    RedeemUnderlyingEth Torrey 0.0015e18 rETH
    Assert Equal (Bep20 rETH TokenBalance Geoff) 4e8
    Assert Equal (Bep20 rETH TokenBalance Torrey) 5e8
    Assert Equal (Bep20 rETH TotalSupply) 9e8

Test "Mint then redeem 1 wei"
    NewCointroller
    ListedEtherToken rETH initialExchangeRate:0.005e9
    CallMintEth Geoff 0.005e18 rETH
    AllowFailures
    -- Check current affairs
    Assert Equal (Bep20 rETH TokenBalance Geoff) 10e8
    Assert Equal (RToken rETH UnderlyingBalance Geoff) 0.005e18
    Invariant Static (RToken rETH ExchangeRateStored)
    Invariant Static (EtherBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlyingEth Geoff 1 rETH
    Assert Revert "revert redeemTokens zero"
