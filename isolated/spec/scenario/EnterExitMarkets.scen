-- Enter and Exit Markets Tests

Test "Enter Markets Idempotent"
	NewCointroller
	Assert Equal (Cointroller MembershipLength Geoff) Zero
	Assert Equal (Cointroller AssetsIn Geoff) []
	ListedRToken ZRX rZRX
	EnterMarkets Geoff rZRX
	Assert Log MarketEntered (rToken (Address rZRX)) (account (Address Geoff))
	Assert Equal (Cointroller MembershipLength Geoff) (Exactly 1)
	Assert True (Cointroller CheckMembership Geoff rZRX)
	ListedRToken OMG rOMG
	EnterMarkets Geoff rZRX rOMG
	Assert Equal (Cointroller MembershipLength Geoff) (Exactly 2)
	Assert True (Cointroller CheckMembership Geoff rZRX)
	Assert True (Cointroller CheckMembership Geoff rOMG)
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX) (Address rOMG)]

Test "Entered Market Must Be Supported"
	NewCointroller
	Assert Equal (Cointroller MembershipLength Geoff) Zero
	ListedRToken ZRX rZRX
	EnterMarkets Geoff rZRX
	Assert Equal (Cointroller MembershipLength Geoff) (Exactly 1)
	NewRToken OMG rOMG
	EnterMarkets Geoff rZRX rOMG
	Assert Equal (Cointroller MembershipLength Geoff) (Exactly 1)
	Assert True (Cointroller CheckMembership Geoff rZRX)
	Assert False (Cointroller CheckMembership Geoff rOMG)
	Support rOMG
	EnterMarkets Geoff rZRX rOMG
	Assert Equal (Cointroller MembershipLength Geoff) (Exactly 2)
	Assert True (Cointroller CheckMembership Geoff rZRX)
	Assert True (Cointroller CheckMembership Geoff rOMG)

Test "Exit single market"
	NewCointroller
	ListedRToken ZRX rZRX
	EnterMarkets Geoff rZRX
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX)]
	ExitMarket Geoff rZRX
	Assert Equal (Cointroller AssetsIn Geoff) []

Test "Exit non-entered market"
	NewCointroller
	ListedRToken ZRX rZRX
	ExitMarket Geoff rZRX
	Assert Equal (Cointroller AssetsIn Geoff) []

Test "Exit one of two market from the front"
	NewCointroller
	ListedRToken ZRX rZRX
	ListedRToken OMG rOMG
	EnterMarkets Geoff rZRX rOMG
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX) (Address rOMG)]
	ExitMarket Geoff rZRX
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rOMG)]

Test "Exit one of two market from the back"
	NewCointroller
	ListedRToken ZRX rZRX
	ListedRToken OMG rOMG
	EnterMarkets Geoff rZRX rOMG
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX) (Address rOMG)]
	ExitMarket Geoff rOMG
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX)]

Test "Exit multiple markets"
	NewCointroller
	ListedRToken ZRX rZRX
	ListedRToken OMG rOMG
	ListedRToken BAT rBAT
	ListedRToken REP rREP
	ListedRToken DAI rDAI
	EnterMarkets Geoff rZRX rOMG rBAT rREP rDAI
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX) (Address rOMG) (Address rBAT) (Address rREP) (Address rDAI)]
	ExitMarket Geoff rZRX
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rDAI) (Address rOMG) (Address rBAT) (Address rREP)]
	ExitMarket Geoff rREP
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rDAI) (Address rOMG) (Address rBAT)]
	ExitMarket Geoff rOMG
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rDAI) (Address rBAT)]
	ExitMarket Geoff rDAI
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rBAT)]
	ExitMarket Geoff rBAT
	Assert Equal (Cointroller AssetsIn Geoff) []

Test "Realistic Market Scenario"
	PricedCointroller
	ListedRToken ZRX rZRX
	SetPriceCF rZRX 0.002 0.4
	ListedEtherToken rETH
	Cointroller SetCollateralFactor cEth 0.8
	ListedRToken BAT rBAT
	SetPriceCF rBAT 0.0015 0.3
	-- Mint some rZRX and rETH
	Prep Geoff 1250e18 ZRX rZRX
	Mint Geoff 1250e18 rZRX -- Liquidity -> 0.4 * 0.002 * 1250e18 = 1.0e18
	SendMintEth Geoff 2.5e18 rETH -- Liqiuidity -> 0.8 * 1.0 * 2.5e18 = 2.0e18
	-- Check liquidity is zero when not in any markets
	Assert Equal (Cointroller Liquidity Geoff) Zero
	-- Enter ZRX and check liquidity
	EnterMarkets Geoff rZRX
	Assert Equal (Cointroller Liquidity Geoff) 1.0e18
	-- Fail to borrow BAT due to liquidity
	Give rBAT 1000e18 BAT
	HoldInvariants
	Borrow Geoff 1000e18 rBAT -- 1000e18 * 0.0015 = 1.5e18 required liquidity
							  -- But since we're only in ZRX, we only have 1.0e18 liquidity
	Assert Failure COINTROLLER_REJECTION BORROW_COINTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
	-- Enter rETH and check liquidity
	EnterMarkets Geoff rETH
	Assert Equal (Cointroller Liquidity Geoff) 3.0e18 -- Sum of rETH and rZRX liquidity from above
	-- Borrow previous BAT amount given liquidity
	Borrow Geoff 1000e18 rBAT
	Assert Equal (Cointroller Liquidity Geoff) 1.5e18 -- Less the borrow amount's toll
	-- Try to exit a eth market but fail due to given borrow requiring eth as collateral
	HoldInvariants
	ExitMarket Geoff rETH
	Assert Failure REJECTION EXIT_MARKET_REJECTION INSUFFICIENT_LIQUIDITY -- Liquidity check fails
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX) (Address rBAT) (Address rETH)]
	-- Repay some borrow and exit market OMG
	Allow Geoff rBAT
	RepayBorrow Geoff 500e18 rBAT
	Assert Equal (Cointroller Liquidity Geoff) 2.25e18 -- With 0.75e18 repaid
	ExitMarket Geoff rETH
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX) (Address rBAT)]
	Assert Equal (Cointroller Liquidity Geoff) 0.25e18 -- Less Eth's 2.0e18 collateral weight
	-- Try and exit rBAT (firist without, then after, repaying)
	HoldInvariants
	ExitMarket Geoff rBAT
	Assert Failure NONZERO_BORROW_BALANCE EXIT_MARKET_BALANCE_OWED
	RepayBorrow Geoff UInt256Max rBAT
	ExitMarket Geoff rBAT
	Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX)]
	Assert Equal (Cointroller Liquidity Geoff) 1.0e18 -- Back to just rZRX
	-- Exit rZRX
	ExitMarket Geoff rZRX
	Assert Equal (Cointroller AssetsIn Geoff) []
	Assert Equal (Cointroller Liquidity Geoff) 0e18 -- Back to nothing
