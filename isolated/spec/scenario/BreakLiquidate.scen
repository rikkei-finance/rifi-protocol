
Macro NewBorrow borrowAmount mintAmount borrowRate=0.000005 user=Geoff collateralPrice=1.0 borrowPrice=1.0 liquidationIncentive=1.1
    PricedCointroller closeFactor:0.9 -- Set the close factor high to reduce number of steps to demonstrate
    Cointroller LiquidationIncentive liquidationIncentive
    NewRToken ZRX rZRX
    NewRToken BAT rBAT borrowRate
    Give rBAT 10e18 BAT -- Faucet some bat to borrow
    PriceOracle SetPrice rZRX collateralPrice
    Support rZRX collateralFactor:0.7
    PriceOracle SetPrice rBAT borrowPrice
    Support rBAT collateralFactor:0
    SimpleBorrow user borrowAmount mintAmount

Macro SimpleBorrow user borrowAmount mintAmount
    Prep user mintAmount ZRX rZRX
    Mint user mintAmount rZRX
    EnterMarkets user rZRX rBAT
    Borrow user borrowAmount rBAT

Test "When account goes further underwater than the liquidation incentive and cannot pay down debt fully"
    -- Happens whenever collateral ratio > liquidation discount (i.e. 1 / liquidation incentive)
    --
    -- Start right around the liquidity threshold
    NewBorrow borrowAmount:1e18 mintAmount:1.43e18 liquidationIncentive:1.1
    --
    -- Verify that the borrow results in the correct state
    Assert Equal (RToken rBAT BorrowBalance Geoff) 1e18
    Assert Equal (RToken rZRX UnderlyingBalance Geoff) 1.43e18
    --
    -- Put the account underwater s.t. 0.91 < Borrow/Supply
    --      i.e. (1 / liquidationIncentive) < Borrow/Supply
    PriceOracle SetPrice rZRX 0.76
    --
    -- Pay back a bunch of debt by liquidating
    Prep Jared 10e18 BAT rBAT
    Liquidate Jared "->" Geoff 0.9e18 rBAT "Seizing" rZRX
    Assert Equal (RToken rBAT BorrowBalance Geoff) 0.1e18
    Assert Equal (RToken rZRX UnderlyingBalance Geoff) 0.127368422e18
    -- Do it again, and note that the collateral is gone but borrows remain
    --  if we had set the close factor lower, it would just take more steps
    Liquidate Jared "->" Geoff 0.0880000008e18 rBAT "Seizing" rZRX
    Assert Equal (RToken rBAT BorrowBalance Geoff) 0.0119999992e18
    Assert Equal (RToken rZRX UnderlyingBalance Geoff) 0

Test "When liquidation incentive is too high to be effective"
    -- Happens whenever liquidation discount < collateral factor
    --
    -- Start right around the liquidity threshold
    NewBorrow borrowAmount:1e18 mintAmount:1.43e18 liquidationIncentive:1.5
    --
    -- Verify that the borrow results in the correct state
    Assert Equal (RToken rBAT BorrowBalance Geoff) 1e18
    Assert Equal (RToken rZRX UnderlyingBalance Geoff) 1.43e18
    --
    -- Put the account underwater s.t. 0.7 < Borrow/Supply
    --              i.e. collateral factor < Borrow/Supply
    PriceOracle SetPrice rZRX 0.87
    --
    -- Now any amount of debt that we pay back by liquidating will make liquidity worse
    --
    -- First, prepare to liquidate
    Prep Jared 10e18 BAT rBAT
    Expect Changes (Cointroller Liquidity Geoff) -0.024999999076e18
    -- Note that the account collateral ratio will become worse than before
    --  although shortfall decreases in absolute terms
    --  had Supply/Borrow = 1.430000000 * 0.87 / 1.0 = 1.244100000
    --  now Supply/Borrow = 0.567931036 * 0.87 / 0.5 = 1.135862072
    --
    -- Now perform the liquidation
    Liquidate Jared "->" Geoff 0.5e18 rBAT "Seizing" rZRX
    --
    -- Verify that the liquidation went through
    Assert Equal (RToken rBAT BorrowBalance Geoff) 0.5e18
    Assert Equal (RToken rZRX UnderlyingBalance Geoff) 0.567931036e18
    --
    -- Test succeeded which means our expectation was correct
    --  liquidity went down after a liquidation!
    --
    -- Now lets see that lowering the incentive and liquidating improves the situation
    Cointroller LiquidationIncentive 1.2
    Expect Changes (Cointroller Liquidity Geoff) 0.016000000294e18
    Liquidate Jared "->" Geoff 0.1e18 rBAT "Seizing" rZRX
