
Test "Standard Upgrade"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    CointrollerImpl Deploy ScenarioG1 ScenCointrollerG1
    Unitroller SetPendingImpl ScenCointrollerG1
    CointrollerImpl ScenCointrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG1)
    ListedRToken ZRX rZRX
    ListedRToken DAI rDAI
    -- Upgrade to G2
    CointrollerImpl Deploy StandardG2 StandardCointrollerG2
    Unitroller SetPendingImpl StandardCointrollerG2
    CointrollerImpl StandardCointrollerG2 BecomeG2
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address StandardCointrollerG2)
    -- Upgrade to G3
    CointrollerImpl Deploy ScenarioG3 ScenCointrollerG3
    Unitroller SetPendingImpl ScenCointrollerG3
    CointrollerImpl ScenCointrollerG3 BecomeG3 1e18 [rZRX rDAI]
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG3)

Test "Standard Upgrade, then downgrade then upgrade again"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    CointrollerImpl Deploy ScenarioG1 ScenCointrollerG1
    Unitroller SetPendingImpl ScenCointrollerG1
    CointrollerImpl ScenCointrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG1)
    ListedRToken ZRX rZRX
    ListedRToken DAI rDAI
    -- Upgrade to G2
    CointrollerImpl Deploy StandardG2 CointrollerG2
    Unitroller SetPendingImpl CointrollerG2
    CointrollerImpl CointrollerG2 BecomeG2
    Cointroller SetPauseGuardian Coburn
    Assert Equal (Cointroller PauseGuardian) (Address Coburn)
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address CointrollerG2)
    -- Upgrade to G3
    CointrollerImpl Deploy ScenarioG3 ScenCointrollerG3
    Unitroller SetPendingImpl ScenCointrollerG3
    CointrollerImpl ScenCointrollerG3 BecomeG3 1e18 [rZRX rDAI]
    Assert Equal (Cointroller PauseGuardian) (Address Coburn)
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG3)
    -- Downgrade to G2
    Unitroller SetPendingImpl CointrollerG2
    CointrollerImpl CointrollerG2 BecomeG2
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address CointrollerG2)
    -- Upgrade to G3 again
    Unitroller SetPendingImpl ScenCointrollerG3
    CointrollerImpl ScenCointrollerG3 BecomeG3 1e18 []
    Assert Equal (Cointroller GetRifiMarkets) [(Address rZRX) (Address rDAI)]
    Assert Equal (Cointroller PauseGuardian) (Address Coburn)
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG3)

Test "Once become, can become again"
    -- TODO: See why ABI is broken here
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    CointrollerImpl Deploy ScenarioG1 ScenCointrollerG1
    Unitroller SetPendingImpl ScenCointrollerG1
    CointrollerImpl ScenCointrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG1)
    CointrollerImpl Deploy ScenarioG1 ScenCointrollerG1_2
    Unitroller SetPendingImpl ScenCointrollerG1_2
    CointrollerImpl ScenCointrollerG1_2 BecomeG1 (PriceOracle Address) 0.4 40
    Assert Equal (Cointroller CloseFactor) 0.4
    Assert Equal (Cointroller MaxAssets) 40
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG1_2)

--G1 recome
Test "Recome has default values"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    CointrollerImpl Deploy ScenarioG1 ScenCointrollerG1
    Unitroller SetPendingImpl ScenCointrollerG1
    CointrollerImpl ScenCointrollerG1 Recome
    Assert Equal (Cointroller CloseFactor) 0.0
    Assert Equal (Cointroller MaxAssets) 0
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG1)

--G1 bork
Test "Bork and unbork"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    CointrollerImpl Deploy ScenarioG1 ScenCointrollerG1
    -- Set a normal impl
    Unitroller SetPendingImpl ScenCointrollerG1
    CointrollerImpl ScenCointrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG1)
    -- Now move to a borked one that's bad
    CointrollerImpl Deploy Borked MyBork
    Unitroller SetPendingImpl MyBork
    CointrollerImpl MyBork BecomeG1 (PriceOracle Address) 0.4 40
    Assert ReadRevert (Cointroller CloseFactor) "revert"
    Assert Equal (Cointroller Implementation) (Address MyBork)
    -- Now change back to the first good one
    Unitroller SetPendingImpl ScenCointrollerG1
    CointrollerImpl ScenCointrollerG1 Recome
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (Cointroller Implementation) (Address ScenCointrollerG1)

Macro CheckUnitrollerStorage implementation
    -- Admin; 0
    Assert Equal (Cointroller Admin) (Address Root)
    Assert Equal (StorageAt Cointroller 0 0 "address") (Address Root)
    -- PendingAdmin; 1
    Assert Equal (Cointroller PendingAdmin) (Address Coburn)
    Assert Equal (StorageAt Cointroller 1 0 "address") (Address Coburn)
    -- CointrollerImplementation; 2
    Assert Equal (Unitroller Implementation) implementation
    Assert Equal (StorageAt Cointroller 2 0 "address") implementation
    -- PendingCointrollerImplementation; 3
    -- check as number since casting address 0 is not defined
    Assert Equal (StorageAt Cointroller 3 0 "number") 0

Macro CheckV1Storage
    -- Oracle; 4
    Assert Equal (Cointroller PriceOracle) (Address PriceOracle)
    Assert Equal (StorageAt Cointroller 4 0 "address") (Address PriceOracle)
    -- CloseFactorMantissa; 5
    Assert Equal (Cointroller CloseFactor) 0.2
    Assert Equal (StorageAt Cointroller 5 0 "number") 0.2e18
    -- LiquidationIncentiveMantissa; 6
    Assert Equal (Cointroller LiquidationIncentive) 1
    Assert Equal (StorageAt Cointroller 6 0 "number") 1e18
    -- MaxAssets; 7
    Assert Equal (Cointroller MaxAssets) 20
    Assert Equal (StorageAt Cointroller 7 0 "number") 20
    -- AccountAssets; 8 *
    Assert Equal (StorageAt Cointroller 8 0 "number") 0
    Assert Equal (StorageAtMapping Cointroller 8 (Address Geoff) "number") 2
    Assert Equal (StorageAtMapping Cointroller 8 (Address Geoff) "list(address)") [(Address rZRX) (Address rBAT)]
    Assert Equal (Cointroller AssetsIn Geoff) [(Address rZRX) (Address rBAT)]
    -- Markets; 9 *
    Assert Equal (StorageAt Cointroller 9 0 "number") 0
    Assert Equal (StorageAtNestedMapping Cointroller 9 (Address rZRX) Geoff "marketStruct") [True 0.5 True]
    Assert Equal (StorageAtNestedMapping Cointroller 9 (Address rBAT) Geoff "marketStruct") [True 0.4 True]
    Assert Equal (StorageAtNestedMapping Cointroller 9 (Address rBAT) Coburn "marketStruct") [True 0.4 False]
    Assert Equal (Cointroller CollateralFactor rZRX) 0.5
    Assert Equal (Cointroller CollateralFactor rBAT) 0.4
    Assert Equal (Cointroller CheckMembership Geoff rZRX) True
    Assert Equal (Cointroller CheckMembership Geoff rBAT) True

Macro CheckV2Storage
    -- PauseGuardian; 10
    Assert Equal (Cointroller PauseGuardian) (Address Coburn)
    Assert Equal (StorageAt Cointroller 10 0 "address") (Address Coburn)
    -- MintGuardianPaused; 11
    Assert Equal (StorageAt Cointroller 10 40 "bool") False
    Assert Equal (Cointroller _MintGuardianPaused) False
    -- BorrowGuardianPaused; 12
    Assert Equal (StorageAt Cointroller 10 42 "bool") False
    Assert Equal (Cointroller _BorrowGuardianPaused) False
    -- TransferGuardianPaused; 13
    Assert Equal (StorageAt Cointroller 10 44 "bool") False
    From Coburn (Cointroller SetGuardianPaused "Transfer" True)
    Assert Equal (Cointroller TransferGuardianPaused) True
    Assert Equal (StorageAt Cointroller 10 44 "bool") True
    Cointroller SetGuardianPaused "Transfer" False
    -- SeizeGuardianPaused; 14
    Assert Equal (StorageAt Cointroller 10 46 "bool") False
    From Coburn (Cointroller SetGuardianPaused "Seize" True)
    Assert Equal (Cointroller SeizeGuardianPaused) True
    Assert Equal (StorageAt Cointroller 10 46 "bool") True
    Cointroller SetGuardianPaused "Seize" False
    --
    -- Pause by market storage
    --
    -- MintGuardianPaused; 15
    Assert Equal (StorageAtMapping Cointroller 11 (Address rZRX) "bool") False
    From Coburn (Cointroller SetGuardianMarketPaused rZRX "Mint" True)
    Assert Equal (Cointroller MintGuardianMarketPaused rZRX) True
    Assert Equal (StorageAtMapping Cointroller 11 (Address rZRX) "bool") True
    Cointroller SetGuardianMarketPaused rZRX "Mint" False
    -- BorrowGuardianPaused; 16
    Assert Equal (StorageAtMapping Cointroller 12 (Address rZRX) "bool") False
    From Coburn (Cointroller SetGuardianMarketPaused rZRX "Borrow" True)
    Assert Equal (Cointroller BorrowGuardianMarketPaused rZRX) True
    Assert Equal (StorageAtMapping Cointroller 12 (Address rZRX) "bool") True
    Cointroller SetGuardianMarketPaused rZRX "Borrow" False

Macro CheckStorage
    -- AllMarkets; 17
    Assert Equal (StorageAt Cointroller 13 0 "number") 2
    -- TODO: StorageAtArray Cointroller 13?
    -- RifiRate; 18
    Assert Equal (StorageAt Cointroller 14 0 "number") 1e18
    -- RifiSpeeds; 19
    Assert Equal (StorageAt Cointroller 15 0 "number") 0
    -- RifiSupplyState; 20
    Assert Equal (StorageAt Cointroller 16 0 "number") 0
    -- RifiBorrowState; 21
    Assert Equal (StorageAt Cointroller 17 0 "number") 0
    -- RifiSupplierIndex; 22
    Assert Equal (StorageAt Cointroller 18 0 "number") 0
    -- RifiBorrowerIndex; 23
    Assert Equal (StorageAt Cointroller 19 0 "number") 0
    -- RifiAccrued; 24
    Assert Equal (StorageAt Cointroller 20 0 "number") 0

-- Times out coverage, disable for now - ideally set flag to not run in coverage
Pending "Keeps all storage"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    CointrollerImpl Deploy StandardG1 CointrollerG1
    Unitroller SetPendingImpl CointrollerG1
    CointrollerImpl CointrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Cointroller SetPendingAdmin Coburn
    ---
    NewRToken ZRX rZRX delegatorType:RBep20Delegator rTokenType:RBep20Delegate
    NewRToken BAT rBAT delegatorType:RBep20Delegator rTokenType:RBep20Delegate
    Give rBAT 10e18 BAT -- Faucet some bat to borrow
    Support rZRX collateralFactor:0.5
    Support rBAT collateralFactor:0.4
    Prep Geoff Some ZRX rZRX
    Mint Geoff 100e18 rZRX
    EnterMarkets Geoff rZRX rBAT
    Borrow Geoff 1e18 rBAT
    --
    CheckUnitrollerStorage (Address CointrollerG1)
    CheckV1Storage
    --
    CointrollerImpl Deploy StandardG2 CointrollerG2
    Unitroller SetPendingImpl CointrollerG2
    Assert Equal (Unitroller PendingImplementation) (Address CointrollerG2)
    Assert Equal (StorageAt Cointroller 3 0 "address") (Address CointrollerG2)
    CointrollerImpl CointrollerG2 BecomeG2
    Cointroller SetPauseGuardian Coburn
    --
    CheckUnitrollerStorage (Address CointrollerG2)
    CheckV1Storage
    CheckV2Storage
    --
    CointrollerImpl Deploy StandardG3 CointrollerG3
    Unitroller SetPendingImpl CointrollerG3
    CointrollerImpl CointrollerG3 BecomeG3 1e18 [rZRX rBAT]
    --
    CheckUnitrollerStorage (Address CointrollerG3)
    CheckV1Storage
    CheckV2Storage
    CheckStorage
    --
    CointrollerImpl Deploy Standard CointrollerG4
    Unitroller SetPendingImpl CointrollerG4
    CointrollerImpl CointrollerG4 Become
    --
    CheckUnitrollerStorage (Address CointrollerG4)
    CheckV1Storage
    CheckV2Storage
    CheckStorage
