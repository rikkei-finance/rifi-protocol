-- Redeem Tests

Test "Mint WBTC then Redeem All"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    -- Check current affairs
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Any other good invariants?
    Invariant Static (RToken rWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 500e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) Zero
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 70e8

Test "Mint WBTC, Enter and then Redeem All"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    -- Check current affairs
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Any other good invariants?
    Invariant Static (RToken rWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff rWBTC
    Redeem Geoff 500e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) Zero
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 70e8

Test "Mint WBTC then Redeem Part"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    -- Check current affairs
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Any other good invariants?
    Invariant Static (RToken rWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 250e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 250e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 45e8

Test "Mint WBTC then Redeem Too Much"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    -- Check and hold static
    Invariant Static (RToken rWBTC ExchangeRateStored)
    Invariant Remains (Bep20 rWBTC TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Now redeem after some time
    FastForward 2 Blocks
    AllowFailures
    Redeem Geoff 501e8 rWBTC
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint WBTC then Redeem Zero"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    -- Check current affairs
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Any other good invariants?
    Invariant Static (RToken rWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 0e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 20e8

Test "Mint WBTC then redeem with interest - no reserves"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Invariant Remains (RToken rWBTC Reserves) Zero
    Prep Geoff 50e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (RToken rWBTC UnderlyingBalance Geoff) 50e8
    Assert Equal (RToken rWBTC ExchangeRate) 0.1
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC rWBTC 10e8 5e8 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e8 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (RToken rWBTC UnderlyingBalance Geoff) 55e8
    Assert Equal (RToken rWBTC ExchangeRate) 0.11
    -- Now redeem all with interest
    Redeem Geoff 500e8 rWBTC
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 55e8
    Assert Equal (Bep20 WBTC TokenBalance rWBTC) 0e8
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 0e8
    Assert Equal (RToken rWBTC UnderlyingBalance Geoff) 0e8
    Assert Equal (RToken rWBTC ExchangeRate) 0.1

Test "Mint WBTC then redeem part with interest - no reserves"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Invariant Remains (RToken rWBTC Reserves) Zero
    Prep Geoff 50e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (RToken rWBTC UnderlyingBalance Geoff) 50e8
    Assert Equal (RToken rWBTC ExchangeRate) 0.1
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC rWBTC 10e8 5e8 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e8 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (RToken rWBTC UnderlyingBalance Geoff) 55e8
    Assert Equal (RToken rWBTC ExchangeRate) 0.11
    -- Now redeem all with interest
    Redeem Geoff 499e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 1e8
    Assert Equal (RToken rWBTC UnderlyingBalance Geoff) 0.11e8
    Assert Equal (RToken rWBTC ExchangeRate) 0.11

Test "Mint WBTC then redeem with reserves and interest"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 50e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (RToken rWBTC UnderlyingBalance Geoff) 50e8
    Assert Equal (RToken rWBTC ExchangeRate) 0.1
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC rWBTC 10e8 5e8 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e8 of interest for the protocol
    --   The reserves should get 20% of this, or 1e8, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 500e8
    Assert Equal (RToken rWBTC Reserves) 1e8
    Assert Equal (RToken rWBTC UnderlyingBalance Geoff) 54e8
    -- 55e8 + 0e8 - 1e8 / 500
    Assert Equal (RToken rWBTC ExchangeRate) 0.108
    -- Now redeem all with interest
    Redeem Geoff 500e8 rWBTC
    Assert Equal (Bep20 WBTC TokenBalance Geoff) 54e8
    Assert Equal (Bep20 WBTC TokenBalance rWBTC) 1e8
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 0e8
    Assert Equal (RToken rWBTC Reserves) 1e8
    Assert Equal (RToken rWBTC UnderlyingBalance Geoff) 0e8
    Assert Equal (RToken rWBTC ExchangeRate) 0.1

Test "Two users Mint WBTC, one redeems"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff Some WBTC rWBTC
    Prep Torrey Some WBTC rWBTC
    Mint Geoff 2e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 20e8
    Assert Equal (Bep20 rWBTC TotalSupply) 20e8
    Mint Torrey 2e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 20e8
    Assert Equal (Bep20 rWBTC TokenBalance Torrey) 20e8
    Assert Equal (Bep20 rWBTC TotalSupply) 40e8
    Redeem Torrey 10e8 rWBTC
    Assert Equal (Bep20 rWBTC TokenBalance Geoff) 20e8
    Assert Equal (Bep20 rWBTC TokenBalance Torrey) 10e8
    Assert Equal (Bep20 rWBTC TotalSupply) 30e8

Test "Redeem WBTC transfer out fails"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    -- Check current affairs
    Invariant Remains (Bep20 rWBTC TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 WBTC TokenBalance Geoff) 20e8
    Invariant Static (RToken rWBTC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Bep20 WBTC Pause
    AllowFailures
    Redeem Geoff 500e8 rWBTC
    Assert Revert

Test "Mint WBTC, Enter, then Redeem Too Much (collateral factor: 0)"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Prep Geoff 70e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    -- Check and hold static
    Invariant Static (RToken rWBTC ExchangeRateStored)
    Invariant Remains (Bep20 rWBTC TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff rWBTC
    AllowFailures
    Redeem Geoff 501e8 rWBTC
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint WBTC, Enter, then Redeem Too Much (collateral factor: 0.1)"
    NewCointroller
    ListedRToken WBTC rWBTC initialExchangeRate:0.1 tokenType:WBTC
    Cointroller SetCollateralFactor rWBTC 0.1
    Prep Geoff 70e8 WBTC rWBTC
    Mint Geoff 50e8 rWBTC
    -- Check and hold static
    Invariant Static (RToken rWBTC ExchangeRateStored)
    Invariant Remains (Bep20 rWBTC TokenBalance Geoff) 500e8
    Invariant Remains (Bep20 WBTC TokenBalance Geoff) 20e8
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff rWBTC
    AllowFailures
    Redeem Geoff 501e8 rWBTC
    Assert Failure COINTROLLER_REJECTION REDEEM_COINTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
